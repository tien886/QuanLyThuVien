<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">

    <!-- Rounded Button -->
    <Style x:Key="RoundedButton" TargetType="Button">
        <!-- Defaults -->
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="14,6"/>
        <Setter Property="Background" Value="{StaticResource ChanelBackground}"/>
        <Setter Property="Foreground" Value="{StaticResource White}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ChanelBackground}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>

        <!-- Rounded template -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="10"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True"/>
                    </Border>

                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Button hover/pressed/disabled states (like your RadioButton style) -->
        <Style.Triggers>
            <!-- Hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource InUse}"/>
                <Setter Property="BorderBrush" Value="{StaticResource InUse}"/>
                <Setter Property="Foreground" Value="{StaticResource White}"/>
            </Trigger>

            <!-- Pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Stroke}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Stroke}"/>
                <Setter Property="Foreground" Value="{StaticResource White}"/>
            </Trigger>

            <!-- Disabled -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#FFCFCFCF"/>
                <Setter Property="BorderBrush" Value="#FFCFCFCF"/>
                <Setter Property="Foreground" Value="#FF7A7A7A"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Icon inside RoundedButton (FontAwesome) -->
    <Style x:Key="RoundedButtonIcon" TargetType="fa:IconImage">
        <!-- Inherit color from the owning Button -->
        <Setter Property="Foreground"
                Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Margin" Value="0,0,8,0"/>
        <!-- Optional: react to button states if you want different behavior -->
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource White}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource White}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                <Setter Property="Foreground" Value="#FF7A7A7A"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Text inside RoundedButton -->
    <Style x:Key="RoundedButtonText" TargetType="TextBlock">
        <Setter Property="Foreground"
                Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

</ResourceDictionary>
